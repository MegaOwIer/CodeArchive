/*题目描述:如果在输入的字符串中,含有类似于"d-h"或"4-8"的子串,我们就把它当作一种简写,输出时,用连续递增的字母或数字串替代其中的减号
           我们通过设置一些参数,使字符串的展开更为灵活.具体约定如下:
		   (1)遇到下面的情况需要做字符串的展开:在输入的字符串中,出现了减号"-",减号两侧同为小写字母或同为数字,且按照ASCII码的顺序,减号右边的字符严格大于左边的字符
		   (2)参数p1:展开方式.p1=1时,对于字母子串,填充小写字母;p1=2时,对于字母子串,填充大写字母.这两种情况下数字子串的填充方式相同
		      p1=3时,不论是字母子串还是数字子串,都用与要填充的字母个数相同的星号*来填充
		   (3)参数p2:填充字符的重复个数.p2=k表示同一个字符要连续填充k个时，子串"d-h"应扩展为"deeefffgggh".减号两侧的字符不变
		   (4)参数p3:是否改为逆序:p3=1表示维持原有顺序:p3=2表示采用逆序输出:注意这时仍然不包括减号两端的字符
		      例如当p1=1、p2=2、p3=2 时,子串"d-h"应扩展为"dggffeeh"
		   (5)如果减号右边的字符恰好是左边字符的后继,只删除中间的减号,例如"d-e"应输出为"de","3-4"应输出为"34"
		      如果减号右边的字符按照ASCII码的顺序小于或等于左边字符,输出时,要保留中间的减号,例如:"d-d"应输出为"d-d","3-1"应输出为"3-1"
  输入描述:第1行为用空格隔开的3个正整数,依次表示参数p1,p2,p3
           第2行为一行字符串,仅由数字、小写字母和减号"-"组成.行首和行末均无空格
  输出描述:输出只有一行,为展开后的字符串
  样例输入:样例1:1 2 1
                 abcs-w1234-9s-4zz
           样例2:2 3 2
		         a-d-d
           样例3:3 4 2
		         di-jkstra2-6
  样例输出:样例1:abcsttuuvvw1234556677889s-4zz
           样例2:aCCCBBBd-d
           样例3:dijkstra2************6
  数据范围及提示:40%的数据满足：字符串长度不超过5
                 100%的数据满足：1<=p1<=3, 1<=p2<=8, 1<=p3<=2。字符串长度不超过100*/

#include <iostream>
#include <cstring>
using namespace std;

char s[101];
string a[101];
int p1,p2,p3;

void print(int x,int y)
{
    char q;
	int i,j;
	if(p3==2)  for(i=y-1;i>x;i--)
	           {
				   if(p1==1)  for(j=0;j<p2;j++)  {q=i;  cout<<q;}
				   if(p1==2&&97<=i&&i<=122)  for(j=0;j<p2;j++)  {q=i-'a'+'A';  cout<<q;}
                   if(p1==2&&48<=i&&i<=57)  for(j=0;j<p2;j++)  {q=i;  cout<<q;}
				   if(p1==3)  for(j=0;j<p2;j++)  {q='*';  cout<<q;}
			   }
    else  for(i=x+1;i<y;i++)
	      {
		      if(p1==1)  for(j=0;j<p2;j++)  {q=i;  cout<<q;}
		      if(p1==2&&97<=i&&i<=122)  for(j=0;j<p2;j++)  {q=i-'a'+'A';  cout<<q;}
		      if(p1==2&&48<=i&&i<=57)  for(j=0;j<p2;j++)  {q=i;  cout<<q;}
		      if(p1==3)  for(j=0;j<p2;j++)  {q='*';  cout<<q;}
		  }
}

int main()
{
    int ss=0;
	cin>>p1>>p2>>p3>>s;
	int l=strlen(s);
	for(int i=0;i<l;i++)
	{
	    if(ss==1)  
		{
		    if(s[i]=='-'&&s[i-1]<s[i+1]) 
			{
			    if(('0'<=s[i-1]&&s[i-1]<='9'&&'0'<=s[i+1]&&s[i+1]<='9')||('a'<=s[i-1]&&s[i-1]<='z'&&'a'<=s[i+1]&&s[i+1]<='z'))  print(s[i-1],s[i+1]);
                else  cout<<s[i];
			}
		    else  cout<<s[i];
		}
        else  cout<<s[i];
	    if(s[i]!='-')  ss=1;
	} 
    return 0;
} 
